---
- debug:
    msg: "Waiting for cluster to finish provisioning."
  listen: "watch aro installation"


- name: Check cluster...
  azure.azcollection.azure_rm_openshiftmanagedcluster_info:
    resource_group: "{{ cluster.cluster_resource_group }}"
    name: "{{ cluster.name }}"
  register: _aro_check
  until: (_aro_check.clusters.properties.provisioningState == "Succeeded")
  failed_when: _aro_check.clusters.properties.provisioningState == "Failed"
  retries: 120
  delay: 60
  listen: "watch aro installation"

- fail:
    msg: "Cluster {{ azr_aro_cluster }} failed to provision."
  when: _aro_check.clusters.properties.provisioningState == "Failed"
  listen: "watch aro installation"

- set_fact:
    _cluster_ready: True
  listen: "watch aro installation"

- debug:
    msg: |
      ***************************************
      {{ cluster.name }} created.
      Run the following to get login credentials
      ***************************************

      ARO_API=$(az aro show \
      --name {{ cluster.name }} \
      --resource-group {{ cluster.cluster_resource_group }} \
      -o tsv --query apiserverProfile.url)

      ARO_CONSOLE=$(az aro show \
        --name {{ cluster.name }} \
        --resource-group {{ cluster.cluster_resource_group}} \
        -o tsv --query consoleProfile)

      ARO_PASS=$(az aro list-credentials \
        --name {{ cluster.name }} \
        --resource-group {{ cluster.cluster_resource_group }} \
        -o tsv --query kubeadminPassword)

      oc login $ARO_API --username kubeadmin --password "$ARO_PASS"

      echo "Console: $ARO_CONSOLE"
      echo "Username: kubeadmin"
      echo "Password: $ARO_PASS"
  listen: "watch aro installation"

      # cat <<EOF | oc apply -f -
      # kind: StorageClass
      # apiVersion: storage.k8s.io/v1
      # metadata: 
      #   name: managed-premium
      #   annotations:
      #     storageclass.kubernetes.io/is-default-class: "true"
      # provisioner: kubernetes.io/azure-disk
      # parameters:
      #   kind: Managed
      #   storageaccounttype: Premium_LRS
      # reclaimPolicy: Delete
      # allowedVolumeExpansion: true
      # volumeBindingMode: WaiteForFirstCustomer
      # EOF

      # cat <<EOF | oc apply -f -
      # kind: StorageClass
      # apiVersion: storage.k8s.io/v1
      # metadata: 
      #   name: azurefiles-premium
      # provisioner: file.csi.azure.com
      # parameters:
      #   protocol: nfs
      #   networkEndpointType: privateEndpoint
      #   location: $region
      #   resourceGroup: $resourceGroupName
      # reclaimPolicy: Retain
      # allowedVolumeExpansion: true
      # volumeBindingMode: Immediate
      # EOF

    # verbosity: 0

