---
- name: Check if cluster with same name already exists.
  azure.azcollection.azure_rm_openshiftmanagedcluster_info:
    resource_group: "{{ cluster.cluster_resource_group }}"
    subscription_id:  "{{ cluster.subscription_id }}"
    name: "{{ cluster.name }}"
  register: _aro_check

- name: Abort Cluster creation if cluster with same name exists
  when: _aro_check.clusters != {}
  block:
    - name: Checking whether to Abort. Abort if cluster with similar name exists
      ansible.builtin.debug:
        msg:
          - "Previous installation of cluster with name {{ cluster.name }} exists..."
    - name: Fail Installation Attempt
      ansible.builtin.fail:
        msg: |
          - Aborting {{ cluster.name }} cluster creation...
          - Error: "{{ _aro_check.clusters }}"

- name: Get Key Vault by name
  azure.azcollection.azure_rm_keyvault_info:
    resource_group: "{{ akv_resource_group }}"
    name: "{{ vault_name }}"
    client_id: "{{ akv_read_client_id }}"
    secret: "{{ akv_read_client_secret }}"
    tenant: "{{ tenant_id }}"
    subscription_id: "{{ subscription_id }}"
  register: keyvault

- name: Set key vault URI fact
  ansible.builtin.set_fact:
    keyvaulturi: "{{ keyvault['keyvaults'][0]['vault_uri'] }}"

- name: Read Cluster Subscription_id from AKV
  azure.azcollection.azure_rm_keyvaultsecret_info:
    vault_uri: "{{ keyvaulturi }}"
    name: "{{ cluster_subscription_id_key }}"
    client_id: "{{ akv_read_client_id }}"
    secret: "{{ akv_read_client_secret }}"
    tenant: "{{ tenant_id }}"
    subscription_id: "{{ subscription_id }}"
  register: cluster_subscription_id

- name: Read Cluster Service Principal from AKV - Client ID
  azure.azcollection.azure_rm_keyvaultsecret_info:
    vault_uri: "{{ keyvaulturi }}"
    name: "{{ cluster_sp_id_key }}"
    client_id: "{{ akv_read_client_id }}"
    secret: "{{ akv_read_client_secret }}"
    tenant: "{{ tenant_id }}"
    subscription_id: "{{ subscription_id }}"
  register: cluster_client_id

- name: Read Cluster Service Principal from AKV - Client Secret
  azure.azcollection.azure_rm_keyvaultsecret_info:
    vault_uri: "{{ keyvaulturi }}"
    name: "{{ cluster_sp_secret_key }}"
    client_id: "{{ akv_read_client_id }}"
    secret: "{{ akv_read_client_secret }}"
    tenant: "{{ tenant_id }}"
    subscription_id: "{{ subscription_id }}"
  register: cluster_client_secret

- name: Read Cluster Tenant ID from AKV
  azure.azcollection.azure_rm_keyvaultsecret_info:
    vault_uri: "{{ keyvaulturi }}"
    name: "{{ cluster_tenant_id_key }}"
    client_id: "{{ akv_read_client_id }}"
    secret: "{{ akv_read_client_secret }}"
    tenant: "{{ tenant_id }}"
    subscription_id: "{{ subscription_id }}"
  register: cluster_tenant_id

- name: Read Pull Secret from AKV
  azure.azcollection.azure_rm_keyvaultsecret_info:
    vault_uri: "{{ keyvaulturi }}"
    name: "{{ pull_secret_akv_key }}"
    client_id: "{{ akv_read_client_id }}"
    secret: "{{ akv_read_client_secret }}"
    tenant: "{{ tenant_id }}"
    subscription_id: "{{ subscription_id }}"
  register: pull_secret

- name: Read Cluster Service Principal Object id
  azure.azcollection.azure_rm_keyvaultsecret_info:
    vault_uri: "{{ keyvaulturi }}"
    name: "{{ cluster_sp_object_id_key }}"
    client_id: "{{ akv_read_client_id }}"
    secret: "{{ akv_read_client_secret }}"
    tenant: "{{ tenant_id }}"
    subscription_id: "{{ subscription_id }}"
  register: cluster_sp_object_id  

- name: Set secrets from key vault into reusable variables
  ansible.builtin.set_fact:
    clientId: "{{ cluster_client_id['secrets'][0]['secret'] }}"
    clientSecret: "{{ cluster_client_secret['secrets'][0]['secret'] }}"
    spObjectIdVal: "{{ cluster_sp_object_id['secrets'][0]['secret'] }}"
    tenantId: "{{ cluster_tenant_id['secrets'][0]['secret'] }}"
    pullSecret: "{{ pull_secret['secrets'][0]['secret'] }}"
    subscriptionId: "{{ cluster_subscription_id['secrets'][0]['secret'] }}"

- name: Create Network resources if cluster.conditionals.create_network_vnet_and_subnets is set to True
  when: cluster.conditionals.create_network_vnet_and_subnets
  block:
    - name: Create Resource Groups for VNET and Subnets
      azure.azcollection.azure_rm_resourcegroup:
        name: "{{ vnet.network_rg }}"
        location: "{{ vnet.location }}"
        subscription_id: "{{ installer.subscription_id }}"
        state: present
        tags:  "{{ tags | items2dict(key_name='key', value_name='value') }}"

    - name: Create a VNET for ARO
      azure.azcollection.azure_rm_virtualnetwork:
        resource_group: "{{ vnet.network_rg }}"
        subscription_id: "{{ installer.subscription_id }}"
        name: "{{ vnet.name }}"
        address_prefixes_cidr: "{{ vnet.address_cidr }}"
        tags:   "{{ tags | items2dict(key_name='key', value_name='value') }}"

    - name: Create a Control Plane Subnet
      azure.azcollection.azure_rm_subnet:
        resource_group: "{{ vnet.network_rg }}"
        virtual_network_name: "{{ vnet.name }}"
        subscription_id: "{{ installer.subscription_id }}"
        name: "{{ vnet.control_plane.name }}"
        address_prefix_cidr: "{{ vnet.control_plane.address_cidr }}"
        service_endpoints:
          - service: "Microsoft.ContainerRegistry"
        private_link_service_network_policies: Disabled
      register: controlSubnet

    - name: Create Worker Nodes Subnet
      azure.azcollection.azure_rm_subnet:
        resource_group: "{{ vnet.network_rg }}"
        subscription_id: "{{ installer.subscription_id }}"
        virtual_network_name: "{{ vnet.name }}"
        name: "{{ vnet.worker_plane.name }}"
        address_prefix_cidr: "{{ vnet.worker_plane.address_cidr }}"
        service_endpoints:
          - service: "Microsoft.ContainerRegistry"
      register: workerSubnet

- name: Conditionally set variable names based on the condition settings
  ansible.builtin.set_fact:
    vnetName: "{{ vnet.name if cluster.conditionals.create_network_vnet_and_subnets else cluster.network.vnet_name }}"
    vnetRG: "{{ vnet.network_rg if cluster.conditionals.create_network_vnet_and_subnets else cluster.network.vnet_rg }}"
    controlSubnet: "{{ vnet.control_plane.name if cluster.conditionals.create_network_vnet_and_subnets else cluster.network.control_subnet_name }}"
    workerSubnet: "{{ vnet.worker_plane.name if cluster.conditionals.create_network_vnet_and_subnets else cluster.network.worker_subnet_name }}"

- name: Create Cluster Resource Group
  azure.azcollection.azure_rm_resourcegroup:
    name: "{{ cluster.cluster_resource_group }}"
    subscription_id: "{{ installer.subscription_id }}"
    location: "{{ cluster.location }}"
    state: present
    tags:  "{{ tags | items2dict(key_name='key', value_name='value') }}"

- name: Wait until the resource group exists
  azure.azcollection.azure_rm_resourcegroup_info:
    name: "{{ cluster.cluster_resource_group }}"
    subscription_id: "{{ installer.subscription_id }}"
  register: rg_facts
  until: rg_facts.resourcegroups and rg_facts.resourcegroups[0].properties.provisioning_state == "Succeeded"
  retries: 2
  delay: 20

- name: "Grab Cluster Service Principal User ID"
  azure.azcollection.azure_rm_adserviceprincipal_info:
    app_id: "{{ clientId }}"
  register: useraccounts

- name: Create Azure policy for the Cluster Resource Group
  when: cluster.conditionals.create_azure_policy_for_tags
  block:
    - name: Read policy rule JSON
      slurp:
        src: roles/create-aro-cluster/files/policy_rule.json
      register: policy_rule_content

    - name: Read policy parameters JSON
      slurp:
        src: roles/create-aro-cluster/files/policy_parameters.json
      register: policy_parameters_content

    - name: Create Azure policy Definition
      azure.azcollection.azure_rm_resource:
        url: "https://management.azure.com/subscriptions/{{ cluster.subscription_id }}/providers/Microsoft.Authorization/policyDefinitions/{{ cluster.policy_definition }}?api-version=2023-04-01"
        method: PUT
        body:
          properties:
            mode: "All"
            displayName: "{{ cluster.policy_definition }}"
            description: "RO Cluster Tag Policy Definition"
            policyRule: "{{ policy_rule_content.content | b64decode | from_json }}"
            parameters: "{{ policy_parameters_content.content | b64decode | from_json }}"
      register: policyDefinition
    
    - name: Create dynamic params for policy assignment
      set_fact:
        dynamic_params: >
          {
            {% for tag in tags %}
            "tag{{ loop.index0 }}": {
              "value": {
                "tag": [
                  "{{ tag.key }}",
                  "{{ tag.value }}"
                ]
              }
            }{% if not loop.last %},{% endif %}
            {% endfor %},
            "resourceGroupName": {
              "value": "{{ cluster.cluster_resource_group }}"
            }
          }

    - name: Create Azure policy Assignment
      ansible.builtin.command: >
        az policy assignment create -n {{ cluster.policy_definition }}-{{ cluster.name }} \
        --policy {{ cluster.policy_definition }} \
        --scope "/subscriptions/{{ cluster.subscription_id }}" \
        --location {{ cluster.location }} \
        --mi-system-assigned \
        --role "Tag Contributor" \
        --identity-scope "/subscriptions/{{ cluster.subscription_id }}" \
        --params '{{ dynamic_params | to_json }}'

- name: Assign Contributor Role to SP in Resource Group "{{ cluster.cluster_resource_group }}"
  when: cluster.conditionals.use_aro_sp
  azure.azcollection.azure_rm_roleassignment:
    scope: "{{ rg_facts.resourcegroups[0].id }}"
    assignee_object_id: "{{ useraccounts.service_principals[0].object_id }}"
    role_definition_id:
      "/subscriptions/{{ cluster.subscription_id }}/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
 
- name: Assign Network Contributor Role VNET "{{ vnetName }}"
  when: cluster.conditionals.use_aro_sp
  azure.azcollection.azure_rm_roleassignment:
    scope: /subscriptions/{{ cluster.subscription_id }}/resourceGroups/{{ vnetRG }}/providers/Microsoft.Network/virtualNetworks/{{ vnetName }}
    assignee_object_id: "{{ useraccounts.service_principals[0].object_id }}"
    role_definition_id:
      "/subscriptions/{{ cluster.subscription_id }}/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7"

- name: Save pullSecret to File
  ansible.builtin.copy:
    content: "{{ pullSecret }}"
    dest: pullsecret.txt
    mode: '0644'

- name: Cluster Creation Starting...
  ansible.builtin.debug:
    msg: |
      ***************************************
      Preparing to create {{ cluster.name }}. This task may take up to an hour.
      ***************************************

- name: Build the ARO Deployment base command
  ansible.builtin.set_fact:
    aro_command:
      "az aro create
      --subscription {{ subscriptionId }}
      --resource-group {{ cluster.cluster_resource_group }}
      --name {{ cluster.name }}
      --location {{ cluster.location }}
      --vnet {{ vnetName }}
      --vnet-resource-group {{ vnetRG }}
      --master-subnet {{ controlSubnet }}
      --master-vm-size {{ cluster.control_instance }}
      --master-enc-host --master-encryption-at-host {{ cluster.conditionals.encrypt_master_hosts }}
      --worker-subnet {{ workerSubnet }}
      --worker-count {{ cluster.worker_node_count }}
      --worker-enc-host --worker-encryption-at-host {{ cluster.conditionals.encrypt_worker_hosts }}
      --worker-vm-disk-size-gb {{ cluster.worker_disk }}
      --worker-vm-size {{ cluster.worker_instance }}
      --outbound-type {{ cluster.network.outbound_type }}
      --pod-cidr {{ cluster.network.pod_cidr }}
      --service-cidr {{ cluster.network.service_cidr }}
      --enable-preconfigured-nsg {{ cluster.conditionals.enable_preconfigured_nsg }}
      --pull-secret @pullsecret.txt
      --apiserver-visibility {{ cluster.network.api_visibility }}
      --ingress-visibility {{ cluster.network.ingress_visibility }}
      --fips --fips-validated-modules {{ cluster.conditionals.enable_fips }}
      --debug
      --output json
      --verbose
      --no-wait"

- name: Define Conditionally Added Parameters
  ansible.builtin.set_fact:
    optional_params:
      - { param: 'domain', value: "{{ cluster.domain }}", condition: "{{ cluster.conditionals.specify_custom_domain }}" }
      - { param: 'version', value: "{{ cluster.version }}", condition: "{{ cluster.conditionals.specify_version }}" }
      - { param: 'disk-encryption-set', value: "{{ cluster.disk_encryption_set }}", condition: "{{ cluster.conditionals.specify_disk_encryption_set }}" }
      - { param: 'client-id', value: "{{ clientId }}", condition: "{{ cluster.conditionals.use_aro_sp }}" }
      - { param: 'client-secret', value: "{{ clientSecret }}", condition: "{{ cluster.conditionals.use_aro_sp }}" }
  no_log: True

- name: Reconstruct ARO Deployment command
  ansible.builtin.set_fact:
    aro_command: "{{ aro_command }} --{{ item.param }} '{{ item.value }}'"
  when: item.value is defined and item.value != '' and item.condition
  with_items: "{{ optional_params }}"

- name: Save dynamically generated script artefact
  ansible.builtin.copy:
    content: "{{ aro_command }}"
    dest: artefacts/ansibleruncommand.sh

- name: Run the dynamically built command for ARO cluster creation
  ansible.builtin.command: "{{ aro_command }}"
  register: cluster_create
  changed_when: cluster_create.rc != 0
  when: ( not _aro_check.clusters )

- name: Cleanup Temporary Cluster Creation files
  ansible.builtin.file:
    path: pullsecret.txt
    state: absent

- name: Wait for cluster installation to complete
  ansible.builtin.debug:
    msg: "Waiting for cluster to finish provisioning."

- name: Cluster creation in progress. Please wait...
  azure.azcollection.azure_rm_openshiftmanagedcluster_info:
    resource_group: "{{ cluster.cluster_resource_group }}"
    name: "{{ cluster.name }}"
  register: _aro_check
  until: (_aro_check.clusters.properties and _aro_check.clusters.properties.provisioningState == "Succeeded")
  failed_when: _aro_check.clusters.properties.provisioningState == "Failed"
  retries: 60
  delay: 60

- name: Read ARO API URL
  ansible.builtin.command: |
    az aro show \
    --name {{ cluster.name }} \
    --resource-group {{ cluster.cluster_resource_group }} \
    -o tsv \
    --query apiserverProfile.url
  register: apiUrl
  changed_when: false

- name: Read ARO Console URL
  ansible.builtin.command: |
    az aro show \
    --name {{ cluster.name }} \
    --resource-group {{ cluster.cluster_resource_group }} \
    -o tsv \
    --query consoleProfile.url
  register: consoleUrl
  changed_when: false

- name: Read ARO Username
  ansible.builtin.command: |
    az aro list-credentials \
      --name "{{ cluster.name }}" \
      --resource-group "{{ cluster.cluster_resource_group }}" \
      -o tsv \
      --query kubeadminUsername
  register: userName
  changed_when: false

- name: Read ARP Password
  ansible.builtin.command: |
    az aro list-credentials \
    --name {{ cluster.name }} \
    --resource-group {{ cluster.cluster_resource_group }} \
    -o tsv \
    --query kubeadminPassword
  register: passWord
  changed_when: false

- name: Not a part of the main plays. Include by updating user in common variable file.
  when: ansible_facts['user_id'] == user
  block:
    - name: Print cluster console and api URL
      ansible.builtin.debug:
        msg: 
          - "ARP API URL:....... {{ apiUrl.stdout }}"
          - "ARO Console:....... {{ consoleUrl.stdout }}"
          # - "ARO Login Username: {{ userName.stdout }}"
          # - "ARO Login Password: {{ passWord.stdout }}"

    - name: Prepare local environment. Please Skip if this doesnt apply
      no_log: true
      with_items:
        - { src: "oc login -u '{{ userName.stdout }}' -p '{{ passWord.stdout }}' '{{ apiUrl.stdout }}'", dest: "/opt/homebrew/bin/aro-login" }
        - { src: "open -a 'Google Chrome.app' '{{ consoleUrl.stdout }}'", dest: "/opt/homebrew/bin/open-aro" }
      ansible.builtin.copy:
        content: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: '0755'

    - name: Write credentials to file for easy recall
      no_log: true
      ansible.builtin.copy:
        content: |
          echo Username: {{ userName.stdout }}
          echo Password: {{ passWord.stdout }}
        dest: /opt/homebrew/bin/aro-creds
        mode: '0755'

- name: Log in to OpenShift (obtain access token)
  register: openshift_auth_results
  community.okd.openshift_auth:
    username: "{{ userName.stdout }}"
    password: "{{ passWord.stdout }}"
    host: "{{ apiUrl.stdout }}"
    validate_certs: false

- name: Bootstrap OpenShift GitOps
  when: integrations.gitops.add
  block:

    - name: Create OpenShift GitOps Namespace
      kubernetes.core.k8s:
        state: present
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        username: "{{ userName.stdout }}"
        host: "{{ apiUrl.stdout }}"
        validate_certs: false
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: openshift-gitops-operator
            annotations:
              openshift.io/display-name: "OpenShift GitOps Operator"
            labels:
              openshift.io/cluster-monitoring: 'true'

    - name: Create OpenShift GitOps Operator Group
      kubernetes.core.k8s:
        state: present
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        username: "{{ userName.stdout }}"
        host: "{{ apiUrl.stdout }}"
        validate_certs: false
        definition:
          apiVersion: operators.coreos.com/v1
          kind: OperatorGroup
          metadata:
            name: openshift-gitops-operator
            namespace: openshift-gitops-operator
          spec: {}    

    - name: Install OpenShift GitOps Subscription
      until: >
        gitops_status.result.status is defined and
        gitops_status.result.status.conditions is defined and
        gitops_status.result.status.conditions | selectattr('type', '==', 'CatalogSourcesUnhealthy') | selectattr('status', '==', 'False') | list | length > 0 and
        gitops_status.result.status.catalogHealth is defined and
        gitops_status.result.status.catalogHealth | selectattr('healthy', '==', true) | list | length == gitops_status.result.status.catalogHealth | length and
        gitops_status.result.status.conditions | selectattr('reason', '!=', 'AllCatalogSourcesHealthy') | list | length == 0
      retries: 50
      delay: 2
      register: gitops_status
      kubernetes.core.k8s:
        state: present
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        username: "{{ userName.stdout }}"
        host: "{{ apiUrl.stdout }}"
        validate_certs: false
        definition:
          apiVersion: operators.coreos.com/v1alpha1
          kind: Subscription
          metadata:
            name: openshift-gitops-operator
            namespace: openshift-operators
          spec:
            channel: "{{ integrations.gitops.version }}"
            installPlanApproval: Automatic
            name: openshift-gitops-operator
            source: redhat-operators
            sourceNamespace: openshift-marketplace

    - name: Read openshift console object called cluster
      register: console_plugin
      kubernetes.core.k8s_info:
        kind: Console
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        username: "{{ userName.stdout }}"
        host: "{{ apiUrl.stdout }}"
        validate_certs: false
        api_version: operator.openshift.io/v1
        name: cluster
  
    - name: Apply multiple patch operations to an existing cluster Console
      when: "('plugins' not in console_plugin.resources[0].spec) or ('gitops-plugin' not in console_plugin.resources[0].spec.plugins)"
      kubernetes.core.k8s_json_patch:
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        username: "{{ userName.stdout }}"
        host: "{{ apiUrl.stdout }}"
        api_version: operator.openshift.io/v1
        validate_certs: false
        kind: Console
        name: cluster
        patch:
          - op: add
            path: /spec/plugins/-
            value: gitops-plugin

- name: Bootstrap External Secrets Operator
  when: integrations.eso.add
  block:

    - name: Install External Secrets Operator Subscription
      register: eso_status
      until: >
        eso_status.result.status is defined and
        eso_status.result.status.conditions is defined and
        eso_status.result.status.conditions | selectattr('type', '==', 'CatalogSourcesUnhealthy') | selectattr('status', '==', 'False') | list | length > 0 and
        eso_status.result.status.catalogHealth is defined and
        eso_status.result.status.catalogHealth | selectattr('healthy', '==', true) | list | length == gitops_status.result.status.catalogHealth | length and
        eso_status.result.status.conditions | selectattr('reason', '!=', 'AllCatalogSourcesHealthy') | list | length == 0
      retries: 50
      delay: 2
      kubernetes.core.k8s:
        state: present
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        username: "{{ userName.stdout }}"
        host: "{{ apiUrl.stdout }}"
        validate_certs: false
        definition:
          apiVersion: operators.coreos.com/v1alpha1
          kind: Subscription
          metadata:
            name: external-secrets-operator-subscription
            namespace: openshift-operators
          spec:
            channel: "{{ integrations.eso.version }}"
            installPlanApproval: Automatic
            name: external-secrets-operator
            source: community-operators
            sourceNamespace: openshift-marketplace

    - name: Create External Secrets Operator Instance Config 
      kubernetes.core.k8s:
        state: present
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        username: "{{ userName.stdout }}"
        host: "{{ apiUrl.stdout }}"
        validate_certs: false
        definition:
          apiVersion: operator.external-secrets.io/v1alpha1
          kind: OperatorConfig
          metadata:
            name: cluster
            namespace: openshift-operators
          spec:
            prometheus:
              enabled: true
              service:
                port: 8080
            resources:
             requests:
               cpu: 10m
               memory: 96Mi
             limits:
               cpu: 100m
               memory: 256Mi

    - name: Create External Secrets Operator Read Secret 
      kubernetes.core.k8s:
        state: present
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        username: "{{ userName.stdout }}"
        host: "{{ apiUrl.stdout }}"
        validate_certs: false
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: akv-sp-read
            namespace: openshift-operators
          type: opaque
          data:
            ClientID: "{{ akv_read_client_id | b64encode }}"
            ClientSecret: "{{ akv_read_client_secret | b64encode }}"

    - name: Create External Secrets Operator ClusterSecretStore 
      kubernetes.core.k8s:
        state: present
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        username: "{{ userName.stdout }}"
        host: "{{ apiUrl.stdout }}"
        validate_certs: false
        definition:          
          apiVersion: external-secrets.io/v1beta1
          kind: ClusterSecretStore
          metadata:
            name: akv-cluster-secret-read
          spec:
            provider:
              azurekv:
                tenantId: "{{ tenant_id }}"
                vaultUrl: "https://{{ vault_name }}.vault.azure.net"
                authSecretRef:
                  clientId:
                    name: akv-sp-read
                    key: ClientID
                    namespace: "openshift-operators"
                  clientSecret:
                    name: akv-sp-read
                    key: ClientSecret
                    namespace: "openshift-operators"

- name: Set up Entra ID integration
  when: integrations.entraid.add
  block:   
    - name: Grab the Oauth redirect url 
      ansible.builtin.command: "az aro show -g {{ cluster.cluster_resource_group }} -n {{ cluster.name }} --query clusterProfile.domain -o tsv"
      register: redirect_url
    
    - name: Set the Redirect URL full path
      ansible.builtin.set_fact: 
        oauth_redirect_url: "https://oauth-openshift.apps.{{ redirect_url.stdout }}.{{ cluster.location }}.aroapp.io/oauth2callback/AAD"

    - name: Entra ID Redirect URL
      ansible.builtin.debug:
        msg:
          - "Entra ID Redirect URL....................{{ oauth_redirect_url }}"
        
    - name: Create Entra ID IDP Secret 
      kubernetes.core.k8s:
        state: present
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        username: "{{ userName.stdout }}"
        host: "{{ apiUrl.stdout }}"
        validate_certs: false
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: entraid-idp-auth-secret
            namespace: openshift-config
          data:
            clientSecret: "{{ entraid_secret | b64encode }}"  

    - name: Create Entra ID OAUTH Integration 
      kubernetes.core.k8s:
        state: present
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        username: "{{ userName.stdout }}"
        host: "{{ apiUrl.stdout }}"
        validate_certs: false
        definition:
          apiVersion: config.openshift.io/v1
          kind: OAuth
          metadata:
            name: cluster
          spec:
            identityProviders:
            - name: AAD
              mappingMethod: claim
              type: OpenID
              openID:
                clientID: "{{ entraid_sp }}"
                clientSecret:
                  name: entraid-idp-auth-secret
                extraScopes:
                - email
                - profile
                - openid
                extraAuthorizeParameters:
                  include_granted_scopes: "true"
                claims:
                  preferredUsername:
                  - email
                  name:
                  - name
                  email:
                  - email
                  group:
                  - groups
                issuer: "https://login.microsoftonline.com/{{ entraid_tenantid }}/v2.0"

- name: Read Default OpenShift Ingress Secret
  kubernetes.core.k8s_info:
    kind: Secret
    api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
    username: "{{ userName.stdout }}"
    host: "{{ apiUrl.stdout }}"
    validate_certs: false
    namespace: openshift-ingress
  register: ingress_secrets

- name: Find secret that ends with 'ingress'
  ansible.builtin.set_fact:
    ingress_secret: "{{ ingress_secrets.resources | json_query('[?ends_with(metadata.name, `ingress`)]') }}"

    

- name: Debug the found secret
  ansible.builtin.debug:
    msg:
      - "Default Ingress Secret Name.......... {{ ingress_secret[0].metadata.name }}"
      
- name: Completion
  ansible.builtin.debug:  
    msg: Cluster Bootstrap Completed



