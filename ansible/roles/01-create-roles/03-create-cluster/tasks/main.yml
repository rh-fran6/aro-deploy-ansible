---
- name: Proceeding with bootstrapping GitOps
  block:
    - name: Proceeding to OpenShift GitOps preparation
      debug:
        msg: 
          - "A cluster with the name {{ cluster.name }} already exists..."
          - "Cluster creationg steps will be skipped"
      notify: watch-aro-installation
      changed_when: true

  when: (_aro_check.clusters != {}) and (_aro_check.clusters.properties.provisioningState == "Succeeded")

- meta: flush_handlers

- name: Abort Cluster creation if initial cluster creation attempt fails
  block:
    - name: Checking whether to Abort. Abort if previous installation failed
      debug:
        msg: 
          - "Previous installation of cluster with name {{ cluster.name }} failed..." 
          - "Please cleanup installation and retry (run 'make delete-cluster' to delete cluster )"

    - name: Fail Installation Attempt
      fail:
        msg: |
          Aborting {{ cluster.name }} cluster creation...

  when: (_aro_check.clusters != {}) and (_aro_check.clusters.properties.provisioningState == "Failed")



- name: Create ARO Cluster using 'az aro'

  block:

    - name: Create Cluster Resource Group
      azure.azcollection.azure_rm_resourcegroup:
        name: "{{ cluster.cluster_resource_group }}"
        location: "{{cluster.location }}"
        state: present
        tags: "{{ tags }}"

    - name: Save pullSecret to File
      copy:
        content: "{{ pullSecret }}"
        dest: pullsecret.txt

    - name: Cluster Creation Message
      debug:
        msg: |
          ***************************************
          Preparing to create {{ cluster.name }}.
          This task may take up to an hour.
          ***************************************    
  
    - name: Build the ARO Deployment base command
      set_fact:
        aro_command: 
          "az aro create
          --subscription {{ subscriptionId }}
          --resource-group {{ cluster.cluster_resource_group }}
          --name {{ cluster.name }}
          --location {{ cluster.location }}
          --vnet {{ vnetName }}
          --vnet-resource-group {{ vnetRG }}
          --master-subnet {{ controlSubnet }}
          --master-vm-size {{ cluster.control_instance }}
          --master-enc-host --master-encryption-at-host {{ cluster.conditionals.encrypt_master_hosts }}
          --worker-subnet {{ workerSubnet }}
          --worker-count {{ cluster.worker_node_count }}
          --worker-enc-host --worker-encryption-at-host {{ cluster.conditionals.encrypt_worker_hosts }}
          --worker-vm-disk-size-gb {{ cluster.worker_disk }}
          --worker-vm-size {{ cluster.worker_instance }}
          --outbound-type {{ cluster.network.outbound_type }}
          --pod-cidr {{ cluster.network.pod_cidr }}
          --service-cidr {{ cluster.network.service_cidr }}
          --enable-preconfigured-nsg {{ cluster.conditionals.enable_preconfigured_nsg }}
          --pull-secret @pullsecret.txt
          --apiserver-visibility {{ cluster.network.api_visibility }}
          --ingress-visibility {{ cluster.network.ingress_visibility }}
          --fips --fips-validated-modules {{ cluster.conditionals.enable_fips }}
          --debug
          --output json
          --verbose
          --no-wait"

    - name: Define Conditionally Added Parameters
      set_fact:
        optional_params:
          - { param: 'domain', value: "{{ cluster.domain }}", condition: "{{ cluster.conditionals.specify_custom_domain }}" }
          - { param: 'version', value: "{{ cluster.version }}", condition: "{{ cluster.conditionals.specify_version }}" }
          - { param: 'disk-encryption-set', value: "{{ cluster.disk_encryption_set }}", condition: "{{ cluster.conditionals.specify_disk_encryption_set }}" }
          - { param: 'tags', value: "{{ tags }}", condition: "{{ cluster.conditionals.specify_tags }}" }

    - name: Reconstruct ARO Deployment command
      set_fact:
        aro_command: "{{ aro_command }} --{{ item.param }} '{{ item.value }}'"
      when: item.value is defined and item.value != '' and item.condition
      with_items: "{{ optional_params }}"

    - name: Run the dynamically built command
      raw: "{{ aro_command }}"
      register: cluster_create
      notify: watch-aro-installation
      changed_when: true
    
    - name: Cleanup Temporary Cluster Creation files
      ansible.builtin.file:
        path: pullsecret.txt
        state: absent

  when: _aro_check.clusters == {}

- name: Proceeding...
  debug:
    msg: Proceeding to check cluster creation status
  notify: watch-aro-installation
  when: (_aro_check.clusters != {}) and (_aro_check.clusters.properties.provisioningState == "Creating")
  changed_when: true

